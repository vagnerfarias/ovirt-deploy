---
# Disaster Recovery environment
- name: Initial servers setup - Disaster Recovery
  hosts: ovirt-backup,ansible
  become: yes
  remote_user: "{{ reg_user }}"
  vars_files:
    - config-vars.yml
  tags:
    # operating system initial setup
    - os_setup

  tasks:
    - name: Update OS
      import_role:
        name: base_os
        tasks_from: prepare.yml
      when: disaster_recovery

- name: Configure ansible host
  hosts: ansible
  remote_user: "{{ reg_user }}"
  vars_files:
    - config-vars.yml

  tasks:

    - name: Enable repository - subscription manager
      shell: subscription-manager repos --enable {{ item }}
      become: true
      with_items: "{{ ansible_repos }}"
      when: repository == "customer_portal" and (new_register.changed or force_repos)
      tags:
        - repos
    
    - name: Enable repository - yum repos
      yum_repository:
        name: "{{ item }}"
        description: "{{ item }}"
        baseurl: "{{ baseurl }}/{{ item }}"
        gpgcheck: no
      become: true
      with_items: "{{ ansible_repos }}"
      when: repository == "yumrepo"
      tags:
        - repos

    - name: Install requirements
      become: yes
      yum:
        name: git, ansible, ovirt-ansible-disaster-recovery, python-ovirt-engine-sdk4
        state: latest
      when: disaster_recovery
      tags:
        - packages

    - name: Checkout disaster-recovery-demo playbooks
      git:
        repo: https://github.com/vagnerfarias/disaster-recovery-demo.git
        dest: "/home/{{ reg_user }}/disaster-recovery"
        version: ovirt-deploy-testing
      tags:
        - git-checkout
      when: disaster_recovery

    - name: Copy inventory to ansible host
      copy:
        src: hosts
        dest: "/home/{{ reg_user }}/disaster-recovery/hosts"
      when: disaster_recovery

    # Fetch ssh host key from first ovirt host in inventory for primary and backup sites
    # disaster recovery playbooks will connect to them during failover/failback
    - name: Fetch ssh host keys - ovirt hosts 
      lineinfile:
        path: files/known_hosts-ovirt
        create: yes
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t ecdsa-sha2-nistp256 '+item) }}"
      with_items:
        - "{{ groups['ovirt-hosts-primary'] }}"
        - "{{ groups['ovirt-hosts-backup'] }}"
      delegate_to: localhost
      #run_once: true
      tags: 
        - hostkeys

    - name: Copy known_hosts to ansible host
      assemble:
        src: ./files
        dest: "/home/{{ reg_user }}/.ssh/known_hosts"
        remote_src: no
        regexp: ^known_hosts.*
      tags:
        - hostkeys
          
    - name: Copy ssh private key to ansible host
      copy:
        src: "{{ reg_user_sshkey_priv }}"
        dest: "/home/{{ reg_user }}/.ssh/id_rsa"
        owner: "{{ reg_user }}"
        group: "{{ reg_user }}"
        mode: 0600
      tags: 
        - sshkey

- name: Setup oVirt Engine - Disaster Recovery
  hosts: ovirt-engine-backup
  remote_user: "{{ reg_user }}"
  become: yes
  vars_files:
    - config-vars.yml
  tags:
    - engine_setup

  vars:
    - ovirt_engine_setup_version: '4.2'
    - ovirt_engine_setup_organization: 'dr-rhvm.example.com'
    - ovirt_engine_setup_product_type: 'rhv'
    - ovirt_engine_setup_accept_defaults: true
    - ovirt_engine_setup_organization: EXAMPLE
    - ovirt_engine_setup_package_list: 
      - firewalld

  roles:
    - { role: rhv, when: disaster_recovery }
    - { role: oVirt.engine-setup, when: disaster_recovery }

- name: Configure oVirt hosts - Disaster Recovery
  hosts: ovirt-hosts-backup
  become: yes
  remote_user: "{{ reg_user }}"
  vars_files:
    - config-vars.yml

  tasks:
    - name: Enable RHV hosts repositories - subscription manager
      shell: subscription-manager repos --enable {{ item }}
      with_items: "{{ rhvh_repos }}"
      when: repository == "customer_portal" and disaster_recovery
      tags: repos

    - name: Enable RHV hosts repositories - yum repo
      yum_repository:
        name: "{{ item }}"
        description: "{{ item }}"
        baseurl: "{{ baseurl }}/{{ item }}"
        gpgcheck: no
      with_items: "{{ rhvh_repos }}"
      when: repository == "yumrepo" and disaster_recovery
      tags: repos

- name: Data Center configuration - Disaster Recovery
  hosts: ovirt-engine-backup
  #connection: local
  remote_user: "{{ reg_user }}"
  gather_facts: false
  vars_files:
    - config-vars.yml
  tags: ovirt-infra

  vars:
     engine_url: https://dr-rhvm.example.com/ovirt-engine/api
     engine_user: admin@internal
     engine_password: "{{ ovirt_engine_setup_admin_password }}" 
     #engine_cafile: /etc/pki/ovirt-engine/ca.pem
     data_center_name: mydatacenter
     compatibility_version: 4.2

     clusters:
      - name: dr-production
        cpu_type: Intel Conroe Family
        profile: development

     hosts:
      - name: dr-rhvh01.example.com
        address: 192.168.70.22
        cluster: dr-production
        password: "{{ root_pass }}"

     storages:
       master:
         master: true
         state: present
         glusterfs:
           address: 192.168.70.11
           path: /rhv-master

     logical_networks:
       - name: mynetwork
         vm_network: true
         clusters:
           - name: dr-production
             assigned: yes
             required: yes
             display: no
             migration: no
             gluster: no

       # waiting for pull request #47185 to be include in RPM
       # https://github.com/ansible/ansible/pull/47185
       # Goal is to set vm_network to false for ovirmgmt network
       #
       #- name: ovirtmgmt
       #  vm_network: false
       #  clusters:
       #    - name: dr-production
       #      assigned: yes
       #      required: yes
       #      display: yes
       #      migration: yes
       #      gluster: no

     host_networks:
       - name: dr-rhvh01.example.com
         check: true
         save: true
         interface: eth1
         networks: 
           - name: mynetwork
             boot_protocol: none

  pre_tasks:
    - name: Login to oVirt
      ovirt_auth:
        url: "{{ engine_url }}"
        username: "{{ engine_user }}"
        password: "{{ engine_password }}"
        ca_file: "{{ engine_cafile | default(omit) }}"
        insecure: "{{ engine_insecure | default(true) }}"
      tags:
        - always

  roles:
    - { role: oVirt.infra, when: disaster_recovery }

  post_tasks:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      tags:
        - always



#- name: Remove Default Data Center - Disaster Recovery
#  hosts: ovirt-engine-backup
#  #connection: local
#  remote_user: "{{ reg_user }}"
#  gather_facts: false
#  vars_files:
#    - config-vars.yml
#  tags: ovirt-infra
#
#  vars:
#     engine_url: https://dr-rhvm.example.com/ovirt-engine/api
#     engine_user: admin@internal
#     engine_password: "{{ ovirt_engine_setup_admin_password }}"
#     #engine_cafile: /etc/pki/ovirt-engine/ca.pem
#     compatibility_version: 4.2
#     data_center_name: Default
#     data_center_state: absent
#     recursive_cleanup: true
#     
#
#  pre_tasks:
#    - name: Login to oVirt
#      ovirt_auth:
#        url: "{{ engine_url }}"
#        username: "{{ engine_user }}"
#        password: "{{ engine_password }}"
#        ca_file: "{{ engine_cafile | default(omit) }}"
#        insecure: "{{ engine_insecure | default(true) }}"
#      tags:
#        - always
#
#  roles:
#    - { role: oVirt.infra, when: disaster_recovery }
#
#  post_tasks:
#    - name: Logout from oVirt
#      ovirt_auth:
#        state: absent
#        ovirt_auth: "{{ ovirt_auth }}"
#      tags:
#        - always
